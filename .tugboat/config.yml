services:
  php:
    # Use PHP 8.x with Apache; this syntax pulls in the latest version of PHP 8.
    image: tugboatqa/php:8.4-apache

    # Set this as the default service. This does a few things:
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building.
    depends:
      - mysql

    # A set of commands to run while building this service.
    commands:
      # Commands that set up the basic preview infrastructure.
      init:
        - echo "===== Apache/PHP Init ======"
        - alias ll='ls -la'
        - apt-get update && apt-get -y install tree nano python3 python3-pip
        - mysql --help | grep "Default options" -A 1
        - tree -d -L 3

        # Install opcache and enable mod-rewrite.
        - docker-php-ext-install opcache
        - a2enmod headers rewrite

        # Link the document root to the expected path. This example links
        # /var/lib/tugboat/web to the docroot of the Apache server (/var/www/html).
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # Increase php memory limit to 256M.
        - echo "memory_limit = 256M" >> /usr/local/etc/php/conf.d/my-php.ini

        # enable display errors.
        - echo "display_errors = On" >> /usr/local/etc/php/conf.d/my-php.ini

        # Enable colored terminal and some aliases.
        - sed -e '9,13 s/#//' -i ~/.bashrc
        - sed -e '16,19 s/#//' -i ~/.bashrc

        - # Use the tugboat-specific Drupal settings (needed for Drush to work).
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.tugboat.php" "${DOCROOT}/sites/default/settings.local.php"

      update:
        - echo "===== Apache/PHP Update ====="

        # Import the database.
        - curl $SNAPSHOT_URL --output snapshot.sql.gz
        - zcat snapshot.sql.gz | mysql -h mysql -utugboat -ptugboat tugboat

        # Install/update packages managed by composer, including drush.
        # First ensure there are no artifacts that snuck into the repo.
        - rm -rf vendor/ web/modules/contrib/ web/core/
        - composer update --optimize-autoloader

        # Enable the stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        - composer require drupal/stage_file_proxy
        - vendor/bin/drush pm:enable --yes stage_file_proxy
        - vendor/bin/drush config:set --yes stage_file_proxy.settings origin "https://performantlabs.com"

        # Take out of maintenance mode.
        - vendor/bin/drush state:set system.maintenance_mode 0

        # Set file permissions such that Drupal will not complain
        - mkdir -p "${DOCROOT}/sites/default/files"
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;
        - mkdir -p "${DOCROOT}/sites/default/files-private"
        - chgrp -R www-data "${DOCROOT}/sites/default/files-private"
        - find "${DOCROOT}/sites/default/files-private" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files-private" -type f -exec chmod 0664 {} \;

        # Enable the QA accounts.
        #- ${TUGBOAT_ROOT}/scripts/promote-admins.sh

        # Update database
        - vendor/bin/drush theme:install stable9
        - vendor/bin/drush updb -y
        - vendor/bin/drush cr

        # Set up error capture.
        - touch /var/log/php-error.log && chown www-data:www-data /var/log/php-error.log
        - echo "log_errors = On"  >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "error_log = /var/log/php-error.log" >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT" >> /usr/local/etc/php/conf.d/my-php.ini

      # Only step that executes on new PR or tugboat builds from base previews.
      build:
        - echo "===== Apache/PHP Build ====="

        # Check for upgrades to the Testery command line interface.
#        - pip3 install testery --upgrade

        # Set up Testery to run tests against the Tugboat environment, using Tugboat environment variables.
#        - testery update-environment
#          --create-if-not-exists
#          --token "$TESTERY_TOKEN"
#          --key "tugboat"
#          --name "Testery on Tugboat"
#          --variable "TUGBOAT_DEFAULT_SERVICE_URL=${TUGBOAT_DEFAULT_SERVICE_URL}"

      # Runs once all services are running, runs on rebuild.
      online:
        - echo "we are online"
#        - testery create-test-run
#          --token "$TESTERY_TOKEN"
#          --git-ref "$TUGBOAT_PREVIEW_SHA"
#          --project-key "performant-labs"
#          --environment-key "tugboat"
#          --parallelize-by-file

  mysql:
    image: tugboatqa/mysql:8-debian

    commands:
      init:
        - echo '===== mySQL Service Init ======'

        # Increase the allowed packet size to 512MB.
        - mysql -e "SET GLOBAL max_allowed_packet=2147483648;"
        - mysql --help | grep "Default options" -A 1

        # Ensure this packet size persists even if MySQL restarts.
        - echo "max_allowed_packet=2147483648" >> /etc/mysql/tugboat.cnf
