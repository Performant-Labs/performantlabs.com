services:
  mysql:
    image: tugboatqa/mysql:8-debian

    commands:
      init:
        # Increase the allowed packet size to 512MB.
        - mysql -e "SET GLOBAL max_allowed_packet=2147483648;"
        # Ensure this packet size persists even if MySQL restarts.
        - echo "max_allowed_packet=2147483648" >> /etc/mysql/tugboat.cnf

      update:
        - zcat project/database/performant-labs_dev.sql.gz | mysql tugboat

  php:
    # Use PHP 8.x with Apache; this syntax pulls in the latest version of PHP 8
    image: tugboatqa/php:8.1-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true
    # Wait until the mysql service is done building
    depends:
      - mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        - echo "===== init"
        # Install apache and mod-rewrite.
        #- docker-php-ext-install opcache
        #- a2enmod headers rewrite
        # Add some tools.
        - apt-get update && apt-get -y install nano

        # Ensure composer is up-to-date.
        - composer self-update --2

        # Increase php memory limit to 256M.
        - echo "memory_limit = 256M" >> /usr/local/etc/php/conf.d/my-php.ini

        # enable display errors.
        - echo "display_errors = On" >> /usr/local/etc/php/conf.d/my-php.ini

        # Enable colored terminal and some aliases.
        - sed -e '9,13 s/#//' -i ~/.bashrc
        - sed -e '16,19 s/#//' -i ~/.bashrc

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        - echo "===== update"

        # Install/update packages managed by composer, including drush.
        - rm -rf vendor/ web/modules/contrib/ web/core/
        - composer self-update --2
        - composer update --optimize-autoloader

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        - vendor/bin/drush pm:enable --yes stage_file_proxy
        - vendor/bin/drush config:set --yes stage_file_proxy.settings origin "https://www.performantlabs.com"

        # Set file permissions such that Drupal will not complain
        - mkdir -p "${DOCROOT}/sites/default/files"
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;
        - mkdir -p "${DOCROOT}/sites/default/files-private"
        - chgrp -R www-data "${DOCROOT}/sites/default/files-private"
        - find "${DOCROOT}/sites/default/files-private" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files-private" -type f -exec chmod 0664 {} \;

      # only step that executes on new PR or tugboat builds from base previews
      build:
        - echo "===== build"

        - rm -rf vendor/ web/modules/contrib/ web/core/
        - composer self-update --2
        - composer update

        - # Use the tugboat-specific Drupal settings.
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.tugboat.php" "${DOCROOT}/sites/default/settings.local.php"

        # Enable the QA accounts.
        - ${TUGBOAT_ROOT}/scripts/promote-admins.sh
        - drush updb -y --no-post-updates
        - drush cr
        - touch /var/log/php-error.log && chown www-data:www-data /var/log/php-error.log
        - echo "log_errors = On"  >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "error_log = /var/log/php-error.log" >> /usr/local/etc/php/conf.d/my-php.ini
        - echo "error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT" >> /usr/local/etc/php/conf.d/my-php.ini

      # runs once all services are running, runs on rebuild
      online:
        - echo "===== online"
        - drush cr
        #- ${TUGBOAT_ROOT}/scripts/git/quality-checkcode tugboat

      # This is run on clone, but not build
      clone:
        - echo "===== clone"

