<?php

/**
 * @file
 *
 * solr-run-search-requests.php
 *
 * Use the files generated by the solr-generate-search-requests.* scripts to run
 * the SOLR requests on all the instances defined in config.json.
 *
 * This script will directly run the requets against the SOLR backend and log the
 * results to a csv file for analysis.
 *
 * It will also generate config files, which could be used for testing manually
 * using the page-diff application.
 */

function help() {
  print("Usage:\n");
  print("drush scr scripts/solr/response-diff/solr-generate-search-requests.php [config.json]\n");
}

/**
 * @param $config
 * @param $nid
 * @param $kw
 * @param $rq_log
 * @param $out
 *
 * @return void
 */
function generate_requests($config, $nid, $kw, $rq_log, $out) {
  // request logs may have more than 1 line; grab the 1st line
  $lines = explode("\n", file_get_contents($rq_log));
  $rq = json_decode($lines[0]);
  foreach($config->servers as $server) {
    $row = [$server->id, $kw, $nid, $rq->language];
    $url = "https://renesas:219d87a5b2520cef3c9f7b4a7c3363a4@" . $server->solr_host . "/solr/" . $server->core . "/select?" . $rq->request;
    try {
      $response = \Drupal::httpClient()->get($url, ['verify' => false]);
      if ($response->getStatusCode() == 200) {
        $body = $response->getBody();
        if (is_dir($config->log_dir)) {
          $fn = str_replace("\/", "x", "{$server->id}-$kw-$nid.log");
          file_put_contents($config->log_dir . "/$fn", $url . "\n" . $body);
        }
        $data = json_decode($body);
        $solr_response = $data->response;
        $hit = FALSE;
        $pos = $hit_pos = 0;
        $hits = "";
        if ($solr_response->numFound > 0) {
          foreach($solr_response->docs as $doc) {
            $s = "{$pos};{$doc->ss_search_api_id};{$doc->score}";
            if (strstr($doc->ss_search_api_id, "node/$nid:") !== FALSE) {
              $hit = TRUE;
              $hit_pos = $pos;
              $s .= ";*";
            }
            $pos++;
            if ($pos > 1) {
              $hits .= "\n";
            }
            $hits .= $s;
          }
        }
        $row[] = $solr_response->numFound;
        $row[] = $solr_response->maxScore ?? $solr_response->score;
        $row[] = $hit ? "Y" : "N";
        $row[] = $hit_pos;
        $row[] = $hits;
        if ($hit) {
          $server->hits++;
        } else {
          $server->misses++;
        }
        print("Server: {$server->id} Keyword: $kw " . ($hit ? "Hit: Yes Pos: $hit_pos\n" : "Hit: No\n"));
        fputcsv($out, $row);
      }
    } catch (Exception $ex) {
      $row[] = "Exception";
      $row[] = $ex->getCode();
      $row[] = $ex->getMessage();
      fputcsv($out, $row);
      print("$url generates an exception: " . $ex->getMessage());
    }
  }
}

$config_file = "/var/www/scripts/solr/response-diff/config.json";
/** @var TYPE_NAME $extra */
if (count($extra) > 0) {
  $config_file = $extra[0];
}

if (!file_exists($config_file)) {
  print("$config_file does not exist\n\n");
  help();
  exit();
}

$config = json_decode(file_get_contents($config_file));

$fd = fopen($config->requests_log, "r");
if (!$fd) {
  print("Failed to open {$config->requests_log}\n");
  exit();
}

$out = fopen($config->response_log, "w");
if (!$out) {
  print("Failed to open {$config->response_log}\n");
  exit();
}
fputcsv($out, ["Server", "Keyword", "nid", "Language", "Num Found", "Max Score", "Hit?", "Hit Pos", "Docs"]);

$pd_config_template = <<<m
{
  "src": {"url": "https://www.renesas.com/", "id": "PROD"},
  "dest": {"url": "https://www.renesas.com.docksal.site/", "id": "TEST"},
  "tests" : []
}
m;

$pd_config = json_decode($pd_config_template);
if (count($config->servers) > 0) {
  $pd_config->src->url = $config->servers[0]->url;
  $pd_config->src->id = $config->servers[0]->id;
  $config->servers[0]->hits = $config->servers[0]->misses = 0;
}
if (count($config->servers) > 1) {
  $pd_config->dest->url = $config->servers[1]->url;
  $pd_config->dest->id = $config->servers[1]->id;
  $config->servers[1]->hits = $config->servers[1]->misses = 0;
}

while (($row = fgetcsv($fd)) !== FALSE) {
  $l = count($row);
  $nid = $row[2];
  $kw = $row[$l-2];
  $rq_log = $row[$l-1];
  if (file_exists($rq_log)) {
    generate_requests($config, $nid, $kw, $rq_log, $out);
    $region = "us/en";
    if (strstr($rq_log, "jp-ja") !== FALSE)  {
      $region = "jp/ja";
    }
    if (strstr($rq_log, "cn-zh") !== FALSE) {
      $region = "cn/zh";
    }
    $pd_config->tests[] = [$region, $kw, "node:$nid"];
  }
  print("For $kw .. $rq_log\n");
}

file_put_contents($config->page_diff_config, json_encode($pd_config));

fputcsv($out, array("-----------------"));
fputcsv($out, array("Server", "Hits", "Misses", "Percentage"));

foreach($config->servers as $server) {
  $percent = ($server->hits/($server->hits + $server->misses));
  fputcsv($out, array($server->id, $server->hits, $server->misses, $percent));
  printf("Server: {$server->id} Hits: {$server->hits} Misses: {$server->misses} Percentage: %.2f%%\n", $percent * 100);
}

fclose ($fd);
fclose ($out);
