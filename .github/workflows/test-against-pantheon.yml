name: (Test) Run Playwright tests against Pantheon.
run-name: ${{ github.actor }} is running tests on Pantheon.
on:
  workflow_dispatch:
    inputs:
      env:
        description: Environment to run tests on
        type: choice
        options:
          - dev
          - test
          - live
        default: dev
      multienv:
        description: Other environment (for multi-environment setup)
        required: false
      threads:
        description: Thread count
        default: 2
      shards:
        description: Shard count
        default: 1

env:
  PHP_VERSION: '8.1'
  PANTHEON_SITE_NAME: 'performant-labs'
  PANTHEON_ENV: ${{ github.event.inputs.multienv || github.event.inputs.env }}

  # for parallelization
  CI_THREADS: ${{ github.event.inputs.threads }}

  # for reporting
  JOB_NAME: ${{ github.workflow }}
  JOB_NUMBER: ${{ github.run_number }}
  JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  SLACK_WEBHOOK_URL: ${{ secrets.ATK_SLACK_WEBHOOK_URL }}
  MAIL_HOST: ${{ secrets.ATK_MAIL_HOST }}
  MAIL_PORT: ${{ secrets.ATK_MAIL_PORT }}
  MAIL_USER: ${{ secrets.ATK_MAIL_USER }}
  MAIL_PASSWORD: ${{ secrets.ATK_MAIL_PASSWORD }}
  MAIL_TLS_ENABLE: ${{ secrets.ATK_MAIL_TLS_ENABLE }}
  MAIL_FROM: ${{ vars.ATK_MAIL_FROM }}
  MAIL_TO: ${{ vars.ATK_MAIL_TO }}
  MAIL_SUBJECT: ${{ vars.ATK_MAIL_SUBJECT }}

jobs:
  Define-Matrix:
    runs-on: ubuntu-latest
    outputs:
      startTime: ${{ steps.get-output.outputs.startTime }}
      shardIndex: ${{ steps.get-output.outputs.shardIndex }}
    steps:
      - id: get-output
        run: |
          set -x
          echo startTime=$(date '+%s') >> GITHUB_OUTPUT
          echo shardIndex=[$(seq 1 ${{ github.event.inputs.shards }} | tr '\n' ',' | sed 's/.$//')] >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  Test-on-Pantheon:
    needs:
      - Define-Matrix
    strategy:
      fail-fast: false
      matrix:
        shardIndex: ${{ fromJSON(needs.Define-Matrix.outputs.shardIndex) }}
    env:
      GIT_EMAIL: 'ci-bot@pantheon.io'
      GITHUB_REPOSITORY_URL: ${{ github.repositoryUrl }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_PROJECT_USERNAME: ${{ github.repository_owner }}
      GH_PROJECT_REPONAME: ${{ github.repository }}
      PANTHEON_BRANCH: ${{ format('build-{0}', github.run_attempt) }}

    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "For site $PANTHEON_SITE_NAME.$PANTHEON_ENV."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code.
        uses: actions/checkout@v3

      # Install node after checking out repo to get access to package.json.
      - name: 'Set up Node.'
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'npm'

      - name: 'Install NPM dependencies'
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: List the directories in the project (x1).
        run: |
          tree -d -L 3

      - name: Validate composer.json and composer.lock.
        continue-on-error: true
        run: composer validate --strict

      - name: Set Composer cache directory.
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies.
        uses: actions/cache@v3.2.4
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install SSH Key.
        uses: shimataro/ssh-key-action@v2.5.0
        with:
          key: ${{ secrets.PANTHEON_SSH_PRIVATE_KEY }}
          name: id_rsa_pantheon
          config: |
            Host *.drush.in
              IdentityFile ~/.ssh/id_rsa_pantheon
              IdentitiesOnly yes
              HostKeyAlgorithms +ssh-rsa
              PubkeyAcceptedAlgorithms +ssh-rsa
              StrictHostKeyChecking no
          known_hosts: ' '
          if_key_exists: replace

      - name: Install Terminus as standalone command to avoid dependency interference.
        uses: pantheon-systems/terminus-github-actions@main
        with:
          pantheon-machine-token: ${{ secrets.PANTHEON_MACHINE_TOKEN }}

      - name: Verify that test runner can communicate with Pantheon
        run: terminus remote:drush $PANTHEON_SITE_NAME.$PANTHEON_ENV -- status

      - name: Change playwright.atk.config.js
        run: |
          set -x
          sed -i 's/operatingMode: "native"/operatingMode: "pantheon"/g' playwright.atk.config.js
          sed -i 's/isTarget: false/isTarget: true/g' playwright.atk.config.js
          sed -i 's/site: "aSite"/site: "'$PANTHEON_SITE_NAME'"/g' playwright.atk.config.js
          sed -i 's/environment: "dev"/environment: "'$PANTHEON_ENV'"/g' playwright.atk.config.js
          echo "----playwright.atk.config.js----"
          cat playwright.atk.config.js

      - name: Change playwright.config.js
        run: |
          set -x
          SITE_URL=${{ format('https://{1}-{0}.pantheonsite.io/', vars.PANTHEON_SITE_NAME, env.PANTHEON_ENV) }}
          sed -i -r "s/(\\/\\/[[:space:]]*)?baseURL: '.*'/baseURL: '"$(sed "s/\\//\\\\\\//g" <<< $SITE_URL)"'/g" playwright.config.js
          echo "----playwright.config.js----"
          cat playwright.config.js

      - name: Run Playwright tests
        run: export CI_SHARDING=1 && npx playwright test --shard=${{ matrix.shardIndex }}/${{ github.event.inputs.shards }}

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1

      - run: echo "🍏 Job's status ${{ job.status }}."

  Merge-Blob-Reports:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs:
      - Define-Matrix
      - Test-on-Pantheon
    steps:

      - name: Check out repository code.
        uses: actions/checkout@v3

      # Install node after checking out repo to get access to package.json.
      - name: 'Set up Node.'
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'npm'

      - name: 'Install NPM dependencies'
        run: npm ci

      - uses: actions/download-artifact@v4
        with:
          path: blob-report
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into an HTML (and other configured) report
        run: |
          unset CI_SHARDING && npx playwright merge-reports -c playwright.config.js blob-report

      - uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Set environment for messaging results
        run: |
          set -x
          echo JOB_STATUS=${{ needs.Test-on-Pantheon.result }} >> $GITHUB_ENV
          echo JOB_ENV=$PANTHEON_ENV >> $GITHUB_ENV
          echo JOB_BRANCH=${{ github.ref_name }} >> $GITHUB_ENV
          START=${{ needs.Define-Matrix.outputs.startTime }}
          STOP=$(date '+%s')
          echo JOB_DURATION=$((STOP-START))000 >> $GITHUB_ENV

      - name: Send results by email
        if: ${{ vars.ATK_MAIL_ENABLED }}
        run: |
          node message-email.js

      - name: Send results to Slack
        if: ${{ vars.ATK_SLACK_ENABLED }}
        shell: bash
        run: |
          node message-slack.js
