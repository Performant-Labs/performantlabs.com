name: (Test) Run Playwright tests against  Tugboat Preview.
run-name: ${{ github.actor }} is running tests on ${{ github.event.inputs.url }}.
on:
  workflow_dispatch:
    inputs:
      preview_per_shard:
        type: boolean
        description: Create a new preview for each shard, "service" and "URL" will be ignored then
        default: true
      service:
        description: Service ID of php-service of the Tugboat Preview environment
        required: false
      url:
        description: Website URL of the Preview environment
        required: false
      threads:
        description: Thread count
        default: 2
      shards:
        description: Shard count
        default: 3
  pull_request:

env:
  PHP_VERSION: '8.1'

  # for parallelization
  CI_THREADS: ${{ github.event.inputs.threads }}

  # for reporting
  JOB_NAME: ${{ github.workflow }}
  JOB_NUMBER: ${{ github.run_number }}
  JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  SLACK_WEBHOOK_URL: ${{ secrets.ATK_SLACK_WEBHOOK_URL }}
  MAIL_HOST: ${{ secrets.ATK_MAIL_HOST }}
  MAIL_PORT: ${{ secrets.ATK_MAIL_PORT }}
  MAIL_USER: ${{ secrets.ATK_MAIL_USER }}
  MAIL_PASSWORD: ${{ secrets.ATK_MAIL_PASSWORD }}
  MAIL_TLS_ENABLE: ${{ secrets.ATK_MAIL_TLS_ENABLE }}
  MAIL_FROM: ${{ vars.ATK_MAIL_FROM }}
  MAIL_TO: ${{ vars.ATK_MAIL_TO }}
  MAIL_SUBJECT: ${{ vars.ATK_MAIL_SUBJECT }}

jobs:
  Test-Setup:
    env:
      TUGBOAT_TOKEN: ${{ secrets.TUGBOAT_TOKEN }}
      TUGBOAT_REPO_ID: ${{ vars.TUGBOAT_REPO_ID }}

    runs-on: ubuntu-latest
    outputs:
      startTime: ${{ steps.get-output.outputs.startTime }}
      shardIndex: ${{ steps.get-output.outputs.shardIndex }}
    steps:
      - name: Delete prior previews
        if: ${{ github.event.inputs.preview_per_shard }}
        run:
          ./scripts/tests.sh preview:delete --repo $TUGBOAT_REPO_ID

      - id: get-output
        run: |
          set -x
          echo "::set-output name=startTime::$(date '+%s')"
          echo "::set-output name=shardIndex::[$(seq 1 ${{ github.event.inputs.shards }} | tr '\n' ',' | sed 's/.$//')]"
          cat $GITHUB_OUTPUT

  Test-on-Preview:
    needs:
      - Test-Setup
    strategy:
      fail-fast: false
      matrix:
        shardIndex: ${{ fromJSON(needs.Test-Setup.outputs.shardIndex) }}
    env:
      GIT_EMAIL: 'ci-bot@pantheon.io'
      GITHUB_REPOSITORY_URL: ${{ github.repositoryUrl }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_BRANCH: ${{ github.event.pull_request.head.ref || github.ref_name }}
      GH_PROJECT_USERNAME: ${{ github.repository_owner }}
      GH_PROJECT_REPONAME: ${{ github.repository }}
      TUGBOAT_TOKEN: ${{ secrets.TUGBOAT_TOKEN }}
      TUGBOAT_REPO_ID: ${{ vars.TUGBOAT_REPO_ID }}
      SERVICE: ${{ github.event.inputs.service }}
      URL: ${{ github.event.inputs.url }}

    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "For site $PANTHEON_SITE_NAME.$PANTHEON_ENV."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code.
        uses: actions/checkout@v3

      # Create new preview if requested
      - name: Create a preview
        if: ${{ github.event.inputs.preview_per_shard }}
        run: |
          set -x
          ./scripts/tests.sh preview:create --repo $TUGBOAT_REPO_ID > preview.json
          cat preview.json
          SERVICE=$(cat preview.json | jq -r 'map(select(.name=="php"))[0].service')
          URL=$(cat preview.json | jq -r 'map(select(.name=="php"))[0].urls[0]')
          echo SERVICE=$SERVICE >> $GITHUB_ENV
          echo URL=$URL >> $GITHUB_ENV

      # Install node after checking out repo to get access to package.json.
      - name: 'Set up Node.'
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'npm'

      - name: 'Install NPM dependencies'
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: List the directories in the project (x1).
        run: |
          tree -d -L 3

      - name: Install Tugboat.
        run: |
          set -x
          curl -O https://dashboard.tugboatqa.com/cli/linux/tugboat.tar.gz
          tar -zxf tugboat.tar.gz
          echo $GITHUB_WORKSPACE >> $GITHUB_PATH
          echo token: ${{ secrets.TUGBOAT_TOKEN }} > ~/.tugboat.yml

      - name: Verify that test runner can communicate with Tugboat via shell
        run: tugboat shell ${{ github.event.inputs.service }} command="vendor/drush/drush/drush status"

      - name: Change playwright.atk.config.js
        run: |
          set -x
          sed -i '/tugboat/{n;s/isTarget: false/isTarget: true/}' playwright.atk.config.js
          sed -i 's/service: "<id>"/service: "${{ github.event.inputs.service }}"/g' playwright.atk.config.js
          echo "----playwright.atk.config.js----"
          cat playwright.atk.config.js

      - name: Change playwright.config.js
        run: |
          set -x
          sed -i -r "s/(\\/\\/[[:space:]]*)?baseURL: '.*'/baseURL: '"$(sed "s/\\//\\\\\\//g" <<< ${{ github.event.inputs.url }})"'/g" playwright.config.js
          echo "----playwright.config.js----"
          cat playwright.config.js

      - name: Run Playwright tests
        run: export CI_SHARDING=1 && npx playwright test --shard=${{ matrix.shardIndex }}/${{ github.event.inputs.shards }}

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: blob-report
          retention-days: 1

      - run: echo "🍏 Job's status ${{ job.status }}."

  Test-Teardown:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs:
      - Test-Setup
      - Test-on-Preview
    steps:

      - name: Check out repository code.
        uses: actions/checkout@v3

      # Install node after checking out repo to get access to package.json.
      - name: 'Set up Node.'
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'npm'

      - name: 'Install NPM dependencies'
        run: npm ci

      - uses: actions/download-artifact@v4
        with:
          path: blob-report
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into an HTML (and other configured) report
        run: |
          unset CI_SHARDING && npx playwright merge-reports -c playwright.config.js blob-report

      - uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Set environment for messaging results
        run: |
          set -x
          echo JOB_STATUS=${{ needs.Test-on-Preview.result }} >> $GITHUB_ENV
          echo JOB_ENV=${{ github.event.inputs.url }} >> $GITHUB_ENV
          echo JOB_BRANCH=${{ github.ref_name }} >> $GITHUB_ENV
          START=${{ needs.Define-Matrix.outputs.startTime }}
          STOP=$(date '+%s')
          echo JOB_DURATION=$((STOP-START))000 >> $GITHUB_ENV

      - name: Send results by email
        if: ${{ vars.ATK_MAIL_ENABLED }}
        run: |
          node tests/support/message-email.js

      - name: Send results to Slack
        if: ${{ vars.ATK_SLACK_ENABLED }}
        shell: bash
        run: |
          node tests/support/message-slack.js
