name: Build and deploy artifact to Pantheon Dev.
run-name: ${{ github.actor }} is deploying to Pantheon Dev.
on: [push]

env:
  php_version: '8.1'
  pantheon_site_name: 'performant-labs'
  pantheon_env: 'dev'
  
jobs:
  Deploy-to-Dev:
    runs-on: ubuntu-latest
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "For site $pantheon_site_name.$pantheon_env."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code.
        uses: actions/checkout@v3
        
      - name: Set up PHP.
        uses: shivammathur/setup-php@2.24.0
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          php-version: ${{ env.php_version }}
          
      # When dependencies are to be updated, remove the lock file.    
      #- name: Remove composer.lock.
      #  run: rm composer.lock
        
      - name: Validate composer.json and composer.lock.
        continue-on-error: true
        run: composer validate --strict        
        
      - name: Set Composer cache directory.
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache Composer dependencies.
        uses: actions/cache@v3.2.4
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-        

      - name: Avoid GitHub rate limit for Composer.
        run: composer config -g github-oauth.github.com ${{ secrets.GITHUB_TOKEN }}
        
      - name: Composer install.
        run: composer install --optimize-autoloader --no-dev --prefer-dist --no-interaction --no-progress
                
      - name: Install SSH Key.
        uses: shimataro/ssh-key-action@v2.5.0
        with:
          key: ${{ secrets.PANTHEON_SSH_PRIVATE_KEY }}
          name: id_rsa
          config: |
            Host *.drush.in
              IdentityFile ~/.ssh/id_rsa
              User aangelantoni 
              HostKeyAlgorithms +ssh-rsa
              PubkeyAcceptedAlgorithms +ssh-rsa
              IdentitiesOnly yes
              StrictHostKeyChecking no
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}   
          if_key_exists: replace
  
      - name: Install Terminus as standalone command to avoid dependency interference.
        uses: pantheon-systems/terminus-github-actions@main
        with:
          pantheon-machine-token: ${{ secrets.PANTHEON_MACHINE_TOKEN }}

      - name: List the directories in the project.
        run: tree -d -L 3
        
      - name: Show connection info.
        run: |
          terminus site:list
          terminus connection:info $pantheon_site_name.$pantheon_env
        
      - name: Enable maintenance mode.
        run: |
          echo "Enabling maintenance mode for $pantheon_site_name.$pantheon_env."
          #terminus remote:drush $pantheon_site_name.$pantheon_env -- sset system.maintenance_mode 1
          #terminus remote:drush performant-labs.dev -- sget system.maintenance_mode
          #terminus remote:drush performant-labs.dev -- sset system.maintenance_mode 1
          terminus remote:drush performant-labs.dev -- status

      - name: Prepare code for deployment.
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"
          #commit_message=$(git log -1 --pretty=%B)
          #rm -rf .git
          #rm -rf .github
          #rm -rf scripts
          #rm -rf web/core/*.txt
          #git init
          #git config --local gc.auto 0
          #git add --force .
          #git commit -m "Automated deploy: $commit_message" >/dev/null
 
      - name: Terminus Drush updates.
        run: |
          #terminus remote:drush $pantheon_site_name.$pantheon_env -- deploy -y
          #terminus env:clear-cache $pantheon_site.$pantheon_env
          
      - run: echo "🍏 Job's status ${{ job.status }}."
